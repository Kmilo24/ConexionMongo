const express = require('express')
const secureSessionMiddle = require('express-session')({
  secret: 'your-secret-key',
  // key: 'cookieName',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: true, // only https
    httpOnly: true, // Not for JS, prevent XSS
    sameSite: true, // Don't send to other, prevent CSRF
    path: '/user'
  }
})
/**
 * - XSS
 * - CSRF
 * - RegEx DoS
 * - Sessions
 */
const router = express.Router()
  // -set limits
  .use(express.urlencoded({ limit: '1kb', extended: false }))
  .use(express.json({ limit: '1kb' }))

// -set hpp
  .get('/hpp', (req, res) => {
    const DUP = req.query.dup.toUpperCase()
    console.log(DUP)
    return res.send(`${DUP}<a href='./hpp?dup=10&dup-=20'>HPP hpp?dup=10&dup-=20</a>`)
  }
  )
  // -secure session
  .get('/session', secureSessionMiddle, (req, res) => {
    req.session['foo'] = 'bar'
    res.json({ session: req.session })
  })

// csurf
const parseForm = express.urlencoded({ extended: false })
const csurf = require('csurf')
router.use((err, req, res, next) => {
  if (err.code !== 'EBADCSRFTOKEN') return next(err)
  next()
})
  .use(require('cookie-parser')())
  .use(require('express-session')({ secret: 'SEC', saveUninitialized: false, resave: false }))
  .get('/csurf', csurf(), (req, res) => {
    const csrfToken = req.csrfToken()
    res
    // .cookie('X-CSRF-TOKEN', csrfToken)
      .type('html').send($form(csrfToken))
  })
// curl -X POST -F "favoriteColor=qq"
  .post('/csurf', parseForm, csurf(), (req, res) => res.json({ favColour: req.body.favoriteColor }))
  .post('/csrf-origin', require('./csrf-origin-check')([
    'http://localhos:8081'
  ]), (req, res) => res.send('passed'))

const helmet = require('helmet')
router.use(helmet.hidePoweredBy({ setTo: 'PHP 4.2.0' }))
  .get('/xss', (req, res) => res.send(`<div>${req.query.xss || ''}<a href="${req.originalUrl}?xss=<script>alert('hacked')</script>">xss</a></div>`))
  .get('/xss-', helmet.contentSecurityPolicy(), (req, res) => res.send(`<div>${req.query.xss || ''}<a href="${req.originalUrl}?xss=<script>alert('hacked')</script>">xss</a></div>`))
  .get('/xss--', (req, res) => res.send(`<div>${require('xss-filters').inHTMLData(req.query.xss) || ''}<a href="${req.originalUrl}?xss=<script>alert('hacked')</script>">xss</a></div>`))
  .get('/helmet', helmet(), getHeaders)
  .get('/helmet/csp', helmet.contentSecurityPolicy({
    reportOnly: true
  }), getHeaders)
  .get('/click-jack-', helmet.frameguard({ action: 'sameorigin' }), (req, res) => res.send(`<div>No evil iframe</div>`))

module.exports = router

const $form = (csrfToken) => (
  `<html>
      <head>
          <meta name="csrf-token" content="${csrfToken}">
      </head>
      <body>
      <form method="POST">
          <input type="hidden" name="_csrf" value="${csrfToken}">
          Favorite color: <input type="text" name="favoriteColor">
          <button type="submit">Submit</button>
          </form>
      </body>
  </html>`
)
function getHeaders (req, res) { res.json({ headers: res.getHeaders() }) }
