const { check, oneOf, body, validationResult, query, cookie, sanitize, header, param } = require('express-validator')

const BAD_REQUEST = 400
const validateResponse = (req, res) => {
  try {
    validationResult(req).throw()
    res.send('Passed')
  } catch (err) {
    res.status(BAD_REQUEST).json(err)
  }
}
module.exports = require('express').Router()
  .use(require('express').json())
  .use(require('cookie-parser')())
  // curl -H "Content-Type: application/json"   -d '{"username":"xyz@gmail.com","password":12345, "isRepublican":false, "bio":"something"}'   http://localhost:5555/user
  .post('/user',
    body('username')
      .isEmail()
      .normalizeEmail()
      .withMessage('must be email'),
    body('password')
      .isLength({ min: 5 })
      .matches(/\d/)
      .withMessage('must contain number'),
    body('isRepublican').optional().toBoolean(),
    body('bio').not().isEmpty().trim().escape(),
    query('status').optional().isIn(['enabled', 'disabled']),
    (req, res) => {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        return res
          .status(BAD_REQUEST)
          .json({ errors: errors.array() })
      }
      res.end({ status: 'OK', body: req.body })
    })
  .post('/start-freelancing', oneOf([
    check('programming_language').isIn(['javascript', 'java', 'php']),
    check('design_tools').isIn(['canva', 'photoshop', 'gimp'])
  ]), validateResponse)
  .post('/recover-password', body().isEmail(), validateResponse)
  .get('/sanity',
    query('email').isEmail().normalizeEmail(),
    query('text').not().isEmpty().trim().escape(),
    query('age? ').toInt(),
    query('user').optional().custom((val, { req }) => {
      if (val === 'evil') throw new Error('evil user')
      return val === 'admin'
    }).withMessage('Bad User')
  )
  // curl -i -X GET -H "Content-Type: application/json" -d '{"fooBody": 3}' -H "fooHeader: fooValue"  --cookie "fooCookie=fooValue;foo=bar"  http://localhost:8080/valid/mixed/fooParam?fooQuery=1
  .get('/mixed/:fooParam?',
    query('fooQuery').not().isEmpty(),
    body('fooBody').not().isEmpty(),
    cookie('fooCookie').not().isEmpty(),
    header('fooHeader').not().isEmpty(),
    param('fooParam').not().isEmpty(),
    validateResponse)
  .post(
    '/addresses',
    check('addresses.*.postalCode').isPostalCode(),
    // sanitize('addresses.*.number').toInt(),
    validateResponse
  )
  .get('/params-pollution', require('hpp')(), (req, res) => {
    res.send(req.query.foo && req.query.foo.toUpperCase() || 'not set')
  })

// npx jest --watch -c jest.config.js  --rootDir . -- app.js
// npm i -D jest supertes
if (process.env.JEST_WORKER_ID !== undefined) {
  const app = require('express')()
    .use(require('express').json())
    .use(require('cookie-parser')())
    .use('', module.exports)
  const request = require('supertest')(app)
  describe('test', () => {
    it('POST /user', (done) => {
      request
        .post('/user')
        .set('content-type', 'application/json')
        .send({
          username: 'hello@gmail.com',
          password: '123456',
          bio: 'Short Bio'
        })
        .expect(/OK/, done)
    })

    it('POST /user', (done) => {
      request
        .post('/start-freelancing')
        .set('content-type', 'application/json')
        .send({
          programming_language: 'java',
          design_tools: 'gimp'
        })
        .expect({ 'message': 'You are hired' }, done)
    })

    it('GET /mixed', (done) => {
      request
        .get('/mixed/fooParamValue?fooQuery=1')
        .set('content-type', 'application/json')
        .set('fooHeader', 22)
        .set('Cookie', ['fooCookie=1'])
        .send({ fooBody: 1 })
        .expect(/Passed/)
        .expect(200, done)
    })
  })
}
