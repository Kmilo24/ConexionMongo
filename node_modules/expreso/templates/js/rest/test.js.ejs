// npx jest --watch -c jest.config.js  --rootDir . -- app.js
// npm i -D jest supertest
if (process.env.JEST_WORKER_ID !== undefined) {
  const app = require('express')()
  app.use(module.exports)
  // https://github.com/visionmedia/supertest
  const request = require('supertest')(app)
  describe('json-api', () => {
    it('GET /mixed', (done) => {
      request
        .get('/mixed/fooParamValue?fooQuery=1')
        .set('content-type', 'application/json')
        .set('fooHeader', 22)
        .set('Cookie', ['fooCookie=1'])
        .send({ fooBody: 1 })
        .expect(/Passed/)
        .expect(200, done)
    })

    it('GET / - users', (done) => {
      request
        .get('/')
        .set('Accept', 'application/json')
        .expect('Content-type', /json/)
        .expect(200, done)
    })

    it('POST / - users', (done) => {
      let id
      request
        .post('/')
        .set('Content-Type', 'application/json')
        .send({ 'name': 'Test User', 'age': 58 })
      // .expect('Location', new RegExp(`/${id}`))
        .expect(201)
        .end((err, res) => {
          expect(res.body.id).toBeDefined()
          done(err)
        })
    })

    it('POST / - invalid users', (done) => {
      request
        .post('/')
        .set('Content-Type', 'application/json')
        .send({ 'name': 'Tes', 'age': 3 })
        .expect(400)
        .end((err, res) => {
          expect(res.body.errors.length).toBe(1)
          done(err)
        })
    })

    describe('DEL/PUT', () => {
      let id
      const userName = 'Super me'
      beforeEach((done) => {
        request
          .post('/')
          .set('Content-Type', 'application/json')
          .send({ 'name': userName, 'age': 33 })
          .end((err, res) => {
            id = res.body.id
            done(err)
          })
      })

      it(`GET users/id`, (done) => {
        request
          .get(`/${id}`)
          .expect({ 'age': 33, 'id': id, 'name': userName })
          .expect(200, done)
      })
      it(`GET users/miss-id`, (done) => {
        request
          .get(`/${12345}`)
          .expect(/not found/)
          .expect(404, done)
      })

      it(`PUT /id`, (done) => {
        request
          .put(`/${id}`)
          .send({ age: 23 })
          .expect({ age: 23, id, name: userName })
          .expect(200, done)
      })
    })
  })
}
