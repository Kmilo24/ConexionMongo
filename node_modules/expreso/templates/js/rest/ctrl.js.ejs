const users = require('./<%-args.title%>-model')
const { query, param, validationResult, checkSchema, check } = require('express-validator')

const controller = {
  gets: [
    query('from')
      .optional(true)
      .isNumeric(),
    (req, res) => {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        return res.status(400).send(errors)
      }
      const { from, to } = req.query
      res.json(users.list(from, to))
    }
  ],
  got: [
    param('id').isAlphanumeric().withMessage('Alphanumeric')
      .trim().escape() // toBoolean() sanitize
      .isLength({ max: 12, min: 5 }).withMessage('within 5, 12'), (req, res) => {
      const errors = validationResult(req)
      if (!errors.isEmpty()) {
        return res.status(400).send(errors)
      }
      const { id } = req.params
      const user = users.get(req.params.id)
      if (!user) {
        return res.status(404).send(`User ${id} not found`)
      }
      res.json(user)
    }],
  // curl  -X POST --data '{ "name": "Test User", "age": 58}' -H "Content-Type: application/json" http://localhost:8080/users
  post: [checkSchema({
    name: {
      isLength: {
        errorMessage: 'Length should be 3',
        options: { min: 3 }
      }
    },
    age: {
      // Custom validators
      custom: {
        options: (value, { req, location, path }) => {
          return !isNaN(value) && Number(value) > 5 && Number(value) < 150
        },
        errorMessage: `should be between 4 and 150`
      },
      isInt: true,
      // Sanitizers can go here as well
      toInt: true
    }
  }),
  (req, res) => {
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).send(errors)
    }
    const id = users.create(req.body).id
    res.status(201).location(`${req.protocol}://${req.get('host')}${req.originalUrl}/${id}`).json({ id })
  }
  ],

  put: [(req, res) => {
    const { id } = req.params
    res.json(users.update(id, req.body))
  }
  ],
  // curl -X DELETE http://localhost:8080/users/
  del: [(req, res) => {
    const { id } = req.params
    if (users.remove(id)) {
      return res.sendStatus(204)
    }
    return res.sendStatus(404)
  }
  ]
}

module.exports = require('express').Router()
// TODO: Sort paging users?sort=-age,+salary&page=1&totalPages=10
  .use(require('express').json())
  .get('/', controller.gets)
  .post('/', controller.post)
  .get('/:id', controller.got)
  .put('/:id', controller.put)
  .delete('/:id', controller.del)
